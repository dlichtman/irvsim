# -*- coding: utf-8 -*-

# Run this app with `python app.py` and
# visit http://127.0.0.1:8050/ in your web browser.

import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
import pandas as pd
from collections import OrderedDict

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = JupyterDash(__name__, external_stylesheets=external_stylesheets)

app.layout = html.Div([
    html.H1("Instant Runoff Simulator"),
    
    #Number of candidates, input flows to make list of name entries
    html.Label('Enter in NUMBER of candidates'),
    dcc.Input(id='numcan', value='', type='number'),
    
    #make list of candidate names to be entered number of candidates long
    #Also enter in first choice percent 
    html.Label('Percent'),
    #dcc.Input(value='', type='number'),
    html.Label('Candidates'),
    #for i in numcan:
    dcc.Input(id='my-input', value='Enter name of candidate', type='text'),
    #dcc.Input(id='my-input', value='Enter name of candidate 2', type='text'),
    html.Br(),
    html.Div(id='my-output'),
    #labelStyle={'display': 'inline-block'},
    
    #make grid of selectable first choices and percents 
    html.Label('Initial Percent'),
    dcc.Dropdown(
        options=[
            {'label': 'Democrat', 'value': 'D'},
            {'label': u'Republican', 'value': 'R'},
            {'label': 'Libertarian', 'value': 'L'},
            {'label': 'Green', 'value': 'G'},
        ],
        value='',
        style={'width':"40%"},
        placeholder='Choose a candidate'
    ),
    
 

    ], style={'columnCount': 3})
    
    
    #alternative with DataTable
    
    

    #make grid of group modifiers and candidates rankings
    
    
    
    #run sim button
    #--------------------------------------------------
    
    #display first and second choices graph and summary table round by round
    
    #display final summary table
    
    #display sankey diagram

@app.callback(
    Output(component_id='my-output', component_property='children'),
    Input(component_id='my-input', component_property='value')
)
def update_output_div(input_value):
    return 'Output: {}'.format(input_value)
    
#use state to prevent changes until all percentage and candidate changes are made in table

# Run app and display result inline in the notebook
app.run_server(mode='inline')
